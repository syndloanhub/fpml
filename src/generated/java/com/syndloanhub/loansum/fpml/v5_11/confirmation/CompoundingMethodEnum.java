//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.06.22 at 04:56:49 PM EDT 
//


package com.syndloanhub.loansum.fpml.v5_11.confirmation;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for CompoundingMethodEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="CompoundingMethodEnum"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="Flat"/&gt;
 *     &lt;enumeration value="None"/&gt;
 *     &lt;enumeration value="Straight"/&gt;
 *     &lt;enumeration value="SpreadExclusive"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "CompoundingMethodEnum")
@XmlEnum
public enum CompoundingMethodEnum {


    /**
     * Flat compounding. Compounding excludes the spread. Note that the first compounding period has it's interest calculated including any spread then subsequent periods compound this at a rate excluding the spread.
     * 
     */
    @XmlEnumValue("Flat")
    FLAT("Flat"),

    /**
     * No compounding is to be applied.
     * 
     */
    @XmlEnumValue("None")
    NONE("None"),

    /**
     * Straight compounding. Compounding includes the spread.
     * 
     */
    @XmlEnumValue("Straight")
    STRAIGHT("Straight"),

    /**
     * Spread Exclusive compounding.
     * 
     */
    @XmlEnumValue("SpreadExclusive")
    SPREAD_EXCLUSIVE("SpreadExclusive");
    private final String value;

    CompoundingMethodEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static CompoundingMethodEnum fromValue(String v) {
        for (CompoundingMethodEnum c: CompoundingMethodEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
