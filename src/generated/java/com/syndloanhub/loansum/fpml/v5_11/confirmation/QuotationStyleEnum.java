//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.06.20 at 01:58:16 PM EDT 
//


package com.syndloanhub.loansum.fpml.v5_11.confirmation;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for QuotationStyleEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="QuotationStyleEnum"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="PointsUpFront"/&gt;
 *     &lt;enumeration value="TradedSpread"/&gt;
 *     &lt;enumeration value="Price"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "QuotationStyleEnum")
@XmlEnum
public enum QuotationStyleEnum {


    /**
     * When quotation style is "PointsUpFront", the initialPoints element of the feeLeg should be populated.
     * 
     */
    @XmlEnumValue("PointsUpFront")
    POINTS_UP_FRONT("PointsUpFront"),

    /**
     * When quotation style is "TradedSpread", the marketFixedRate element of the feeLeg should be populated.
     * 
     */
    @XmlEnumValue("TradedSpread")
    TRADED_SPREAD("TradedSpread"),

    /**
     * When quotation style is "Price", the marketPrice element of the feeLeg should be populated.
     * 
     */
    @XmlEnumValue("Price")
    PRICE("Price");
    private final String value;

    QuotationStyleEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static QuotationStyleEnum fromValue(String v) {
        for (QuotationStyleEnum c: QuotationStyleEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
